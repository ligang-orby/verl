name: verl-finetune

image: whatcanyousee/verl:ngc-cu124-vllm0.8.3-sglang0.4.5-mcore0.12.0-te2.2
integrations:
  - integration_type: git_repo
    git_repo: ligang-orby/verl
    git_branch: sanjari/actio
    pip_install: .
    ssh_clone: true
command: |
  cd /workspace/verl

  apt update
  apt install -y emacs
  apt install -y awscli
  # urllib3<2 required by awscli
  pip install 'urllib3<2'
  pip install parquet-tools
  pip install sgl-kernel
  # Download model.
  python3 -c "import transformers; transformers.pipeline(model='Qwen/Qwen2.5-VL-7B-Instruct')"

  # Install verl lib: https://verl.readthedocs.io/en/latest/start/install.html
  pip3 install -e .[vllm]

  # Create datasets
  mkdir -p ~/data/uground/raw/
  aws s3 cp s3://orby-osu-va/mds_datasets/Q42024_Intake_Format/ActIO-ActionDescription/parquet/dev.parquet ~/data/uground/raw/dev.parquet
  python examples/data_preprocess/geo3k.py
  # Start ray and training job
  sh scripts/run_ray.sh 
  sleep 60
  if [ "$NODE_RANK" = "0" ]; then
    ray job submit \
        --runtime-env=verl/trainer/runtime_env.yaml \
        --no-wait \
        -- \
        python3 -m verl.trainer.main_ppo \
            trainer.n_gpus_per_node=8 \
            trainer.nnodes=2 \
            algorithm.adv_estimator=grpo \
            data.train_files=$HOME/data/geo3k/train.parquet \
            data.val_files=$HOME/data/geo3k/test.parquet \
            data.train_batch_size=512 \
            data.max_prompt_length=1024 \
            data.max_response_length=2048 \
            data.filter_overlong_prompts=True \
            data.truncation='error' \
            data.image_key=images \
            actor_rollout_ref.model.path=Qwen/Qwen2.5-VL-32B-Instruct \
            actor_rollout_ref.actor.optim.lr=1e-6 \
            actor_rollout_ref.model.use_remove_padding=True \
            actor_rollout_ref.actor.ppo_mini_batch_size=128 \
            actor_rollout_ref.actor.ppo_micro_batch_size_per_gpu=10 \
            actor_rollout_ref.actor.use_kl_loss=True \
            actor_rollout_ref.actor.kl_loss_coef=0.01 \
            actor_rollout_ref.actor.kl_loss_type=low_var_kl \
            actor_rollout_ref.actor.entropy_coeff=0 \
            actor_rollout_ref.model.enable_gradient_checkpointing=True \
            actor_rollout_ref.actor.fsdp_config.param_offload=False \
            actor_rollout_ref.actor.fsdp_config.optimizer_offload=False \
            actor_rollout_ref.rollout.log_prob_micro_batch_size_per_gpu=20 \
            actor_rollout_ref.rollout.tensor_model_parallel_size=2 \
            actor_rollout_ref.rollout.name=vllm \
            actor_rollout_ref.rollout.gpu_memory_utilization=0.6 \
            actor_rollout_ref.rollout.enable_chunked_prefill=False \
            actor_rollout_ref.rollout.enforce_eager=False \
            actor_rollout_ref.rollout.free_cache_engine=False \
            actor_rollout_ref.rollout.n=5 \
            actor_rollout_ref.ref.log_prob_micro_batch_size_per_gpu=20 \
            actor_rollout_ref.ref.fsdp_config.param_offload=True \
            algorithm.use_kl_in_reward=False \
            trainer.critic_warmup=0 \
            trainer.logger=['console','wandb'] \
            trainer.project_name='verl_grpo_example_geo3k' \
            trainer.experiment_name='qwen2_5_vl_7b_function_rm' \
            trainer.save_freq=20 \
            trainer.test_freq=5 \
            trainer.total_epochs=15 $@  | tee /dev/tty | grep -o "raysubmit_[a-zA-Z0-9]*" | xargs -I{} ray job logs --follow {}
  fi
  ray stop
compute:
  gpus: 16 # Number of GPUs to use
  cluster: r8z13p2
  gpu_type: h100_80gb
